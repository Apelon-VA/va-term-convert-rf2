<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>gov.vha.isaac.terminology.converters</groupId>
	<artifactId>term-convert-rf2-econcept-sct</artifactId>
	<!-- this should be set to ${sourceData.version}-loader-${loader.version} but that doesn't appease the maven gods that know best....
		will leave it as is for now, and ignore the warnings. -->
	<version>${sourceData.version}-loader-${loader.version}</version>  <!-- Put D, F or S here, if necessary, to get around maven rules when trying to reuse this pom to post snapshot and full, for example. -->
	<packaging>pom</packaging>

	<name>RF2 eConcept Artifact Generator</name>

	<properties>
		<sourceData.version>20150731</sourceData.version>
		<sourceData.inputType>Full</sourceData.inputType>  <!-- Delta, Full, or Snapshot -->
		<loader.version>2.3-SNAPSHOT</loader.version>
		<!-- For no classifier, leave this blank-->
		<resultArtifactClassifier>Full</resultArtifactClassifier>
	</properties>

	<scm>
		<url>https://github.com/Apelon-VA/va-term-convert-rf2.git</url>
	</scm>

	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
			<comments>Copyright Notice
				This is a work of the U.S. Government and is not subject to copyright
				protection in the United States. Foreign copyrights may apply.
			</comments>
		</license>
		<license>
			<name>SNOMED CT affiliate license agreement</name>
			<url>https://uts.nlm.nih.gov/help/license/LicenseAgreement.pdf</url>
			<comments>The SNOMED CT content packaged by this module is governed by the SNOMED CT affiliate license agreement</comments>
		</license>
	</licenses>

	<organization>
		<name>U.S. Department of Veterans Affairs</name>
		<url>www.va.gov</url>
	</organization>

	<dependencies>
		<dependency>
			<groupId>gov.vha.isaac.terminology.converters</groupId>
			<artifactId>term-convert-rf2-mojo</artifactId>
			<version>${loader.version}</version>
			<scope>compile</scope>
			<optional>true</optional>  <!-- Not needed at runtime -->
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Get source files from archiva -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>fetch-rf2-src</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>gov.vha.isaac.terminology.source.rf2</groupId>
									<artifactId>term-convert-rf2-src-data-sct</artifactId>
									<version>${sourceData.version}</version>
									<type>zip</type>
								</artifactItem>
							</artifactItems>
							<outputDirectory>${project.build.directory}/generated-resources/src</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>unzip-rf2-source</id>
						<phase>generate-sources</phase>
						<configuration>
							<tasks>
								<unzip dest="${project.build.directory}/generated-resources/src/unzipped">
									<fileset dir="${project.build.directory}/generated-resources/src">
										<include name="**/*.zip" />
									</fileset>
								</unzip>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>${project.groupId}</groupId>
				<artifactId>term-convert-rf2-mojo</artifactId>
				<version>${loader.version}</version>
				<executions>
					<execution>
						<id>sct-rf2-conversion first steps</id>
						<goals>
							<goal>sct-rf2-uuid-cache-arf-gen</goal>  <!-- This does nothing, but later steps assume the cache file exists -->
							<goal>sct-rf2-text-definition-to-arf</goal>
							<!--goal>sct-rf2-to-arf</goal-->
							<goal>sct-rf2-to-arf-no-status</goal> <!-- overwrites previous? -->
							<!--goal>sct-rf2-simple-to-arf</goal-->  <!-- This does nothing? -->
							<goal>sct-rf2-dos-to-arf</goal>
						</goals>
						<configuration>
							<inputSctDir>${project.build.directory}/generated-resources/src/unzipped/SnomedCT_RF2Release_INT_${sourceData.version}/${sourceData.inputType}</inputSctDir>
						</configuration>
					</execution>
					<execution>
						<id>sct-rf2 conversion second steps</id>
						<goals>
							<goal>sct-rf2-refset-c-to-arf</goal>  <!-- Does nothing... -->
						</goals>
						<configuration>
							<inputSctDir>${project.build.directory}/generated-resources/src/unzipped/SnomedCT_RF2Release_INT_${sourceData.version}/${sourceData.inputType}</inputSctDir>
							<inputFile>der2_cRefset_AssociationReference</inputFile>
							<!--filters>
								<param>900000000000530003</param> <!- - ALTERNATIVE- ->
								<param>900000000000528000</param> <!- - WAS A- ->
								<param>900000000000526001</param> <!- - REPLACED BY- ->
								<param>900000000000527005</param> <!- - SAME AS- ->
								<param>900000000000525002</param> <!- - MOVED FROM- ->
								<param>900000000000524003</param> <!- - MOVED TO- ->
								<param>900000000000523009</param> <!- - POSSIBLY EQUIVALENT TO- ->
							</filters-->
						</configuration>
					</execution>
					<execution>
						<id>sct-rf2-conversion third steps</id> 
						<goals>
							<goal>sct-rf2-lrs-to-arf</goal>
						</goals>
						<configuration>
							<inputSctDir>${project.build.directory}/generated-resources/src/unzipped/SnomedCT_RF2Release_INT_${sourceData.version}/${sourceData.inputType}</inputSctDir>
						</configuration>
					</execution>
					<execution>
						<id>sct1-arf-to-econcepts</id>
						<goals>
							<goal>sct1-arf-to-econcepts</goal>
						</goals>
						<configuration>
							<useSctRelId>true</useSctRelId>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.4</version>
				<executions>
					<execution>
						<id>attach-result</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>src/assembly/assembly.xml</descriptor>
							</descriptors>
							<attach>false</attach>
							<encoding>UTF-8</encoding>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.9.1</version>
				<executions>
					<execution>
						<id>attach-artifact</id>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<type>jbin.zip</type>
									<!-- Note that the assembly plugin doesn't use the same classifier - we hack the classifier it returns to be a mis
										mash of classifier and part of type.  So there is always a classifier on the produced zip file, even if no classifier
										was specified by the user.  During artifact attachment, this classifier/type mess is corrected. -->
									<file>${project.build.directory}/${project.build.finalName}-.jbin.zip</file>
									<classifier>${resultArtifactClassifier}</classifier>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
